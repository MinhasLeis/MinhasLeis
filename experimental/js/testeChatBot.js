/*
    Script para lidar com os inputs do us√°rio para interagir com o chat bot 
    e posteriormente receber uma mensagem da IA em resposta
*/

//Constantes que pegam elementos do html, atrav√©s do querySelector
//O querySelector pega tags especificas do html para interagir com elas

//chatBody, √© a div onde vai aparecer as mensagens
const chatBody = document.querySelector(".chat-body");

//Message input √© onde pega a mensagem que foi enviada atrav√©s 
//do input da tag <textarea> no HTML
const messageInput = document.querySelector(".message-input");

//Esta constante contem a referencia pro bot√£o de submit do formulario,
//para que seja possivel detectar os cliques nele depois com o EventListener
const sendMessageButton = document.querySelector("#send-message");

//√â criado um objeto chamado userData com a propriedade 'message'
const userData = {
    message: null
}

//Constante que √© um vetor para armazenar historico da conversa e 
// o chat lembrar do que ja foi falado
const chatHistory = [
    {
        //Adicionando um contexto para que a IA j√° saiba sobre o que e como falar
        role: "user",
        parts: [{ text: "A partir de agora, voc√™ √© a Maria, uma assistente jur√≠dico virtual especializado em direito brasileiro. Voc√™ deve se comunicar de forma clara e objetiva. **Use emojis de forma amig√°vel e apropriada para tornar a conversa mais leve, como üëç, üòä, ou ü§î.** Recuse-se a responder perguntas que n√£o sejam sobre o sistema judici√°rio ou leis do Brasil. Comece a primeira conversa se apresentando formalmente e oferecendo ajuda. Formate suas respostas usando Markdown quando apropriado para melhorar a clareza.Use par√°grafos para separar as ideias principais e formate o texto com Markdown" }]

    },
    {
        role: "model",
        parts: [{text: "Ol√°! Eu sou a Maria, sua assistente jur√≠dico virtual. Como posso auxili√°-la com suas d√∫vidas sobre direitos hoje?" }]
    }
];


/* 
    FUN√á√ÉO 1
    Fun√ß√£o que cria os bal√µes de mensagens, o que ela faz √© o seguinte:
    ela recebe dois valores, o 'content' que √© o conteudo que vai para o bal√£o de mensagem
    e o 'classes' que √© o nome da classe da mensagem para que ela receba a estiliza√ß√£o certa do css
    
*/
const createMessageElement = (content, ...classes) =>{
    //√â criado uma tag html vazia na mem√≥ria(n√£o √© visivel por enquanto), sendo a div nesse caso e armazenada numa constante
    const div = document.createElement("div");
    
    //A div recebe por padr√£o a classe 'message' para receber estiliza√ß√£o de tal
    //e depois recebe uma classe a depender do valor digitado no parametro 'classes'
    div.classList.add("message", ...classes);

    //o innerHTML insere o conte√∫do da mensagem que foi recebido via o parametro 'content'
    //para dentro da tag que foi criada, ent√£o agora a div tem o conteudo da mensagem
    div.innerHTML = content

    //√© retornado a div com suas classes definidas e seu conte√∫do
    return div;

};

//FUN√á√ÉO 2 RESPONS√ÅVEL POR GERAR A RESPOSTA DA IA

// A palavra 'async' aqui √© um aviso de que esta fun√ß√£o far√° tarefas que
// demoram (como esperar a internet) e nos permite usar a palavra 'await' l√° dentro.
// Ela recebe como par√¢metro o bal√£o de mensagem "pensando..." (incomingMessageDiv)
// para saber qual elemento na tela ela deve atualizar.
const generateBotResponse = async (incomingMessageDiv) => {
    const messageElement = incomingMessageDiv.querySelector(".message-text");
    const localApiUrl = "/api/groq";

    messageElement.innerHTML = "";
    let botResponseText = "";

    const requestOptions = {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ history: chatHistory })
    };

    try {
        const response = await fetch(localApiUrl, requestOptions);

        // Se a resposta n√£o for 'ok' (ex: status 500, 400, etc.),
        // n√≥s tratamos como um erro JSON antes de tentar o streaming.
        if (!response.ok) {
            const errorData = await response.json(); // Tenta ler o corpo do erro como JSON
            throw new Error(errorData.error || "A resposta da rede n√£o foi 'ok'.");
        }

        // Se a resposta for 'ok' (status 200), a√≠ sim procedemos com o streaming.
        const reader = response.body.getReader();
        const decoder = new TextDecoder();
        
        while (true) {
            const { done, value } = await reader.read();
            if (done) break;

            const chunk = decoder.decode(value);
            const lines = chunk.split('\n');
            for (const line of lines) {
                if (line.startsWith('data: ')) {
                    const jsonStr = line.substring(6);
                    if (jsonStr.trim() === '[DONE]') continue;
                    try {
                        const parsed = JSON.parse(jsonStr);
                        const textChunk = parsed.choices[0]?.delta?.content || "";
                        if (textChunk) {
                            botResponseText += textChunk;
                            messageElement.innerHTML = marked.parse(botResponseText);
                            chatBody.scrollTo({ top: chatBody.scrollHeight, behavior: "auto" });
                        }
                    } catch (e) {
                        // Ignora erros de parsing de JSON incompletos
                    }
                }
            }
        }
        
        chatHistory.push({
            role: "model",
            parts: [{ text: botResponseText }]
        });

    } catch (error) {
        console.error("Erro:", error);
        // Agora, o erro capturado aqui ser√° mais claro
        messageElement.innerText = `Oops! Algo deu errado. (${error.message})`;
        messageElement.style.color = "#ff0000";
    } finally {
        incomingMessageDiv.classList.remove("thinking");
    }
};


/*
    FUN√á√ÉO 3
    Fun√ß√£o respons√°vel por lidar com o processo de envio de mensagem do usu√°rio
*/

const handleOutgoingMessage = (e) => {
    e.preventDefault();
    const message = messageInput.value.trim();
    if (!message) return; // N√£o envia mensagens vazias

    // <<--- ESTA √â A LINHA MAIS IMPORTANTE! ELA PRECISA ESTAR AQUI.
    // 1. Salva a mensagem do usu√°rio no hist√≥rico PRIMEIRO.
    chatHistory.push({ role: "user", parts: [{ text: message }] });

    if(chatHistory.length > 15){
        chatHistory.splice(2, 2)
    }

    // 2. Exibe a mensagem do usu√°rio na tela.
    const outgoingMessageDiv = createMessageElement(`<div class="message-text">${message}</div>`, "user-message");
    chatBody.appendChild(outgoingMessageDiv);
    
    messageInput.value = ""; // Limpa o input
    chatBody.scrollTo({ top: chatBody.scrollHeight, behavior: "smooth" });

    // 3. Mostra o "pensando..." e chama a fun√ß√£o do bot DEPOIS com a fun√ß√£o timeOut.
    setTimeout(() => {
        const thinkingMessageDiv = createMessageElement(`<div class="message-text"><div class="thinking-indicator"><div class="dot"></div><div class="dot"></div><div class="dot"></div></div></div>`, "bot-message", "thinking");
        chatBody.appendChild(thinkingMessageDiv);
        chatBody.scrollTo({ top: chatBody.scrollHeight, behavior: "smooth" });
        generateBotResponse(thinkingMessageDiv);
    }, 600);
};



//FUN√á√ïES DE EVENT LISTENERS 

//1¬∞ messageInput.addEventListener("keydown", (e)  => {}
//2¬∫ sendMessageButton.addEventListener("click", (e) => handleOutgoingMessage(e));


//Primeira Fun√ß√£o de detect√£o de tecla, a fun√ß√£o ser√° acionada toda vez que o usu√°rio pressionar uma tecla.
//Ele lida com o 'messageInput' que armazena o ponto de referencia da mensagem digitada nos formularios
//Curiosidade, o 'e' dentro dos parenteses n√£o √© por acaso, ele √© uma abrevia√ß√£o de 'Event'
//Ele contem alguns dados ba≈õicos do objeto detectado, de modo que conseguimos acessar algumas
//propriedades como o 'target' ou o 'key' para nesse caso informarmos qual tecla foi pressionada

messageInput.addEventListener("keydown", (e) => {
    //Criada constante pra mensagem do usu√°rio e atrav√©s do objeto 'e' criado pra armazenar essa detec√ß√£o, acessamos o valor da detec√ß√£o(que √© o texto) e aplicamos o trim(remove espa√ßos vazios no come√ßo e final do texto)
    const userMessage = e.target.value.trim();


    //Checamos atrav√©s do objeto 'e' se a propriedade 'key'(tecla pressionada) √© a tecla 'Enter'
    //e checamos se 'userMessage' √© verdadeiro ou seja, se n√£o h√° conte√∫do vazio
    if(e.key === "Enter" && userMessage){
        //Se as DUAS condi√ß√µes forem VERDADEIRAS, √© chamado a fun√ß√£o que cuida do processo de envio da mensagem do usu√°rio para o chat e √© colocado como parametro o 'e' que cont√©m os dados da mensagem do usu√°rio
        handleOutgoingMessage(e)
    }
});


//Segunda Fun√ß√£o detectora, nesse caso, do clique do mouse
//Faz a mesma coisa do detector de teclados, mas √© mais simples pois
//n√£o precisa checar qual foi a tecla pressionada
sendMessageButton.addEventListener("click", (e) => handleOutgoingMessage(e));

window.addEventListener("load", () => {
    // Esta fun√ß√£o ser√° executada assim que a p√°gina terminar de carregar.
    
    // Passa por cada item do hist√≥rico inicial
    chatHistory.forEach(turn => {
        // Renderiza apenas as mensagens do 'model' (bot) que j√° devem aparecer
        if (turn.role === 'model') {
            const messageDiv = createMessageElement(
                `<div class="message-text">${turn.parts[0].text}</div>`, 
                "bot-message"
            );
            chatBody.appendChild(messageDiv);
        }
    });

    // Garante que a rolagem esteja no final
    chatBody.scrollTo({ top: chatBody.scrollHeight, behavior: "smooth" });
});